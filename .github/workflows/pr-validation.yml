name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check commit messages
      run: |
        # Check if commit messages follow conventional commits
        git log --oneline origin/main..HEAD | while read line; do
          commit_msg=$(echo "$line" | cut -d' ' -f2-)
          if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+'; then
            echo "❌ Commit message doesn't follow conventional commits: $commit_msg"
            echo "Expected format: type(scope): description"
            echo "Types: feat, fix, docs, style, refactor, test, chore"
            exit 1
          fi
        done
        echo "✅ All commit messages follow conventional commits"

    - name: Check for large files
      run: |
        # Check for files larger than 10MB
        large_files=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*")
        if [ -n "$large_files" ]; then
          echo "❌ Large files detected:"
          echo "$large_files"
          echo "Please use Git LFS for large files or compress them"
          exit 1
        fi
        echo "✅ No large files detected"

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Check test coverage
      run: |
        # Extract coverage percentage from jest output
        coverage=$(npx jest --coverage --watchAll=false --coverageReporters=text-summary 2>/dev/null | grep "Lines" | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: ${coverage}%"

        # Require minimum 70% coverage
        if [ "${coverage%.*}" -lt 70 ]; then
          echo "❌ Test coverage is below 70%"
          exit 1
        fi
        echo "✅ Test coverage meets requirements"

    - name: Check for sensitive information
      run: |
        # Check for potential secrets in the code
        if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]*['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | grep -v node_modules | grep -v .git; then
          echo "❌ Potential secrets found in code"
          echo "Please remove sensitive information and use environment variables"
          exit 1
        fi
        echo "✅ No sensitive information detected"

    - name: Validate package.json changes
      run: |
        # Check if package.json was modified
        if git diff --name-only origin/main..HEAD | grep -q "package.json"; then
          echo "📦 package.json was modified"

          # Check if package-lock.json was also updated
          if ! git diff --name-only origin/main..HEAD | grep -q "package-lock.json"; then
            echo "❌ package.json was modified but package-lock.json was not updated"
            echo "Please run 'npm install' to update package-lock.json"
            exit 1
          fi
          echo "✅ Both package.json and package-lock.json were updated"
        fi

    - name: Check build size
      run: |
        npm run build

        # Check if .next/static exists and get size
        if [ -d ".next/static" ]; then
          size=$(du -sh .next/static | cut -f1)
          echo "Build size: $size"

          # Parse size and check if it's reasonable (less than 50MB)
          size_mb=$(echo "$size" | sed 's/M.*//' | sed 's/K.*/0.1/' | sed 's/G.*/1000/')
          if (( $(echo "$size_mb > 50" | bc -l) )); then
            echo "⚠️ Build size is larger than 50MB, consider optimizing"
          else
            echo "✅ Build size is reasonable"
          fi
        fi

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: validate
    if: always()

    steps:
    - name: Comment validation results
      uses: actions/github-script@v7
      with:
        script: |
          const { data: checkRuns } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha
          });

          const validationRun = checkRuns.check_runs.find(run =>
            run.name.includes('Validate PR')
          );

          let comment = '## 🔍 Pull Request Validation Results\n\n';

          if (validationRun?.conclusion === 'success') {
            comment += '✅ All validation checks passed!\n\n';
            comment += '- ✅ Commit messages follow conventional commits\n';
            comment += '- ✅ No large files detected\n';
            comment += '- ✅ Linting passed\n';
            comment += '- ✅ Type checking passed\n';
            comment += '- ✅ Tests passed with adequate coverage\n';
            comment += '- ✅ No sensitive information detected\n';
            comment += '- ✅ Build completed successfully\n';
          } else {
            comment += '❌ Some validation checks failed. Please review the details above.\n\n';
          }

          comment += '\n> This PR is ready for review once all checks pass.';

          // Check if we already commented
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(comment =>
            comment.body.includes('Pull Request Validation Results')
          );

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }